name: Deploy Maven Artifacts from Submodules

on:
  repository_dispatch:
    types: [submodule-release]
  workflow_dispatch:
    inputs:
      submodule:
        description: 'Submodule to build (leave empty for all)'
        required: false
        type: string
      version:
        description: 'Version to deploy'
        required: true
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Get version from input or payload
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
          echo "SUBMODULE=${{ github.event.client_payload.submodule }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "SUBMODULE=${{ github.event.inputs.submodule }}" >> $GITHUB_OUTPUT
        fi

    - name: Update specific submodule to latest release
      if: steps.get_version.outputs.SUBMODULE != ''
      run: |
        cd lib/${{ steps.get_version.outputs.SUBMODULE }}
        git fetch --tags
        git checkout v${{ steps.get_version.outputs.VERSION }}
        cd ../..
        git add lib/${{ steps.get_version.outputs.SUBMODULE }}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "Update ${{ steps.get_version.outputs.SUBMODULE }} to v${{ steps.get_version.outputs.VERSION }}" || true

    - name: Update all submodules to latest releases
      if: steps.get_version.outputs.SUBMODULE == ''
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Update each submodule to its latest release
        for submodule in lib/*/; do
          if [ -d "$submodule" ]; then
            submodule_name=$(basename "$submodule")
            echo "Updating $submodule_name..."
            cd "$submodule"
            git fetch --tags
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$latest_tag" ]; then
              git checkout "$latest_tag"
              echo "Updated $submodule_name to $latest_tag"
            fi
            cd - > /dev/null
          fi
        done
        
        git add -A
        git commit -m "Update submodules to latest releases" || true

    - name: Push submodule updates
      run: |
        git push origin main || true

    - name: Create Maven repository structure
      run: mkdir -p maven-repo

    - name: Build and install JHiGHS locally (if exists)
      if: hashFiles('lib/JHiGHS/pom.xml') != ''
      run: |
        cd lib/JHiGHS
        
        # Build native dependencies if script exists
        if [ -f "scripts/build-native.sh" ]; then
          chmod +x scripts/build-native.sh
          ./scripts/build-native.sh
        fi
        
        # Set version if provided
        if [ -n "${{ steps.get_version.outputs.VERSION }}" ]; then
          mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}
          mvn versions:commit
        fi
        
        # Build and install to local repository first (for other dependencies)
        mvn clean install -DskipTests
        
        echo "âœ… JHiGHS built and installed locally"

    - name: Build and install Orchestrate locally (if exists)
      if: hashFiles('lib/Orchestrate/pom.xml') != ''
      run: |
        cd lib/Orchestrate
        
        # Set version if provided
        if [ -n "${{ steps.get_version.outputs.VERSION }}" ]; then
          mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}
          mvn versions:commit
        fi
        
        # Build and install (JHiGHS should already be in local repo)
        mvn clean install -DskipTests
        
        echo "âœ… Orchestrate built and installed locally"

    - name: Build and install other Maven projects locally
      run: |
        # Find all other pom.xml files in lib subdirectories (excluding JHiGHS and Orchestrate)
        find lib -name "pom.xml" -not -path "lib/JHiGHS/*" -not -path "lib/Orchestrate/*" | while read pom; do
          dir=$(dirname "$pom")
          project_name=$(basename "$dir")
          echo "Building project: $project_name in $dir"
          cd "$dir"
          
          # Set version if provided
          if [ -n "${{ steps.get_version.outputs.VERSION }}" ]; then
            mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}
            mvn versions:commit
          fi
          
          # Build and install locally
          mvn clean install -DskipTests
          
          echo "âœ… $project_name built and installed locally"
          cd - > /dev/null
        done

    - name: Deploy all projects to Maven repository
      run: |
        echo "ðŸš€ Deploying all projects to Maven repository..."
        
        # Deploy JHiGHS
        if [ -f "lib/JHiGHS/pom.xml" ]; then
          cd lib/JHiGHS
          mvn deploy \
            -DaltDeploymentRepository=local::default::file://$(pwd)/../../maven-repo \
            -DskipTests
          echo "âœ… JHiGHS deployed to Maven repository"
          cd - > /dev/null
        fi
        
        # Deploy Orchestrate
        if [ -f "lib/Orchestrate/pom.xml" ]; then
          cd lib/Orchestrate
          mvn deploy \
            -DaltDeploymentRepository=local::default::file://$(pwd)/../../maven-repo \
            -DskipTests
          echo "âœ… Orchestrate deployed to Maven repository"
          cd - > /dev/null
        fi
        
        # Deploy other projects
        find lib -name "pom.xml" -not -path "lib/JHiGHS/*" -not -path "lib/Orchestrate/*" | while read pom; do
          dir=$(dirname "$pom")
          project_name=$(basename "$dir")
          echo "Deploying $project_name..."
          cd "$dir"
          
          mvn deploy \
            -DaltDeploymentRepository=local::default::file://$(pwd)/../../maven-repo \
            -DskipTests
          
          echo "âœ… $project_name deployed to Maven repository"
          cd - > /dev/null
        done

    - name: Generate repository index
      run: |
        # Create a comprehensive index.html
        cat > maven-repo/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Jesse Nagel's Optimization Maven Repository</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    margin: 0; padding: 40px; background: #f8f9fa; 
                }
                .container { max-width: 1000px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                h2 { color: #34495e; margin-top: 30px; }
                .artifact { 
                    margin: 20px 0; padding: 20px; 
                    border: 1px solid #e0e0e0; border-radius: 6px; 
                    background: #fafafa; 
                }
                .artifact h3 { margin-top: 0; color: #2980b9; }
                code { background: #f4f4f4; padding: 2px 6px; border-radius: 4px; font-family: 'Monaco', 'Consolas', monospace; }
                pre { 
                    background: #2c3e50; color: #ecf0f1; padding: 15px; 
                    border-radius: 6px; overflow-x: auto; 
                    font-family: 'Monaco', 'Consolas', monospace;
                }
                .version-badge { 
                    background: #27ae60; color: white; 
                    padding: 4px 8px; border-radius: 12px; 
                    font-size: 0.8em; font-weight: bold; 
                }
                .setup-section { background: #e8f6f3; padding: 20px; border-radius: 6px; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ðŸ”§ Jesse Nagel's Optimization Maven Repository</h1>
                <p>This repository contains Maven artifacts for optimization libraries and tools.</p>
                
                <div class="setup-section">
                    <h2>ðŸ“¦ Repository Setup</h2>
                    <p>Add this repository to your <code>pom.xml</code>:</p>
                    <pre><code>&lt;repositories&gt;
            &lt;repository&gt;
                &lt;id&gt;jessenagel-optimization&lt;/id&gt;
                &lt;name&gt;Jesse Nagel's Optimization Repository&lt;/name&gt;
                &lt;url&gt;https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/&lt;/url&gt;
            &lt;/repository&gt;
        &lt;/repositories&gt;</code></pre>
                </div>

                <h2>ðŸ“š Available Artifacts</h2>
        EOF

        # Dynamically find all deployed artifacts
        find maven-repo -name "*.pom" | while read pom; do
          if [[ "$pom" != *"maven-metadata"* ]]; then
            # Extract artifact info from path
            relative_path=${pom#maven-repo/}
            IFS='/' read -ra PARTS <<< "$relative_path"
            
            # Reconstruct groupId, artifactId, version
            version=${PARTS[-2]}
            artifactId=${PARTS[-3]}
            
            # GroupId is everything except the last two parts
            groupId=""
            for ((i=0; i<${#PARTS[@]}-3; i++)); do
              if [ $i -gt 0 ]; then groupId="$groupId."; fi
              groupId="$groupId${PARTS[i]}"
            done
            
            # Extract description from POM if possible
            description="Optimization library component"
            if [ -f "$pom" ]; then
              desc_line=$(grep -o '<description>[^<]*</description>' "$pom" 2>/dev/null | head -1)
              if [ -n "$desc_line" ]; then
                description=$(echo "$desc_line" | sed 's/<description>\(.*\)<\/description>/\1/')
              fi
            fi
            
            cat >> maven-repo/index.html << EOF
                <div class="artifact">
                    <h3>$artifactId <span class="version-badge">v$version</span></h3>
                    <p>$description</p>
                    <pre><code>&lt;dependency&gt;
            &lt;groupId&gt;$groupId&lt;/groupId&gt;
            &lt;artifactId&gt;$artifactId&lt;/artifactId&gt;
            &lt;version&gt;$version&lt;/version&gt;
        &lt;/dependency&gt;</code></pre>
                </div>
        EOF
          fi
        done

        cat >> maven-repo/index.html << 'EOF'
                <h2>ðŸš€ Latest Deployment</h2>
                <ul>
                    <li><strong>Deployment Time:</strong> <span id="deploy-time"></span></li>
                    <li><strong>Trigger:</strong> ${{ github.event_name }}</li>
                    <li><strong>Repository:</strong> <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></li>
                </ul>

                <h2>ðŸ”— Submodules</h2>
                <p>This repository automatically builds and deploys artifacts from the following submodules:</p>
                <ul>
        EOF

        # List all submodules
        if [ -f .gitmodules ]; then
          grep "path = " .gitmodules | sed 's/.*path = //' | while read submodule; do
            echo "                    <li><code>$submodule</code></li>" >> maven-repo/index.html
          done
        fi

        cat >> maven-repo/index.html << 'EOF'
                </ul>
                
                <hr style="margin: 40px 0;">
                <p><small>ðŸ¤– Generated automatically by GitHub Actions</small></p>
            </div>
            
            <script>
                document.getElementById('deploy-time').textContent = new Date().toLocaleString();
            </script>
        </body>
        </html>
        EOF

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './maven-repo'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ steps.get_version.outputs.SUBMODULE }}" ]; then
          echo "- **Updated Submodule**: ${{ steps.get_version.outputs.SUBMODULE }}" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ steps.get_version.outputs.VERSION }}" ]; then
          echo "- **Version**: ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Deployed Artifacts" >> $GITHUB_STEP_SUMMARY
        find maven-repo -name "*.jar" -not -name "*sources*" -not -name "*javadoc*" | wc -l | xargs echo "- **JAR files**: " >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ”— [View Repository](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
